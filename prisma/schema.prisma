generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User: user profile
model User {
  id         String      @id @default(uuid())
  name       String
  email      String      @unique
  avatar     String?
  provider   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  sessions   Session[] // Sessions taken by user
  interviews Interview[] // Interviews created by user

  @@index([email]) // For fast email lookups
}

// Interview: Reusable interview templates
model Interview {
  id           String                @id @default(uuid())
  creatorId    String?
  creator      User?                 @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  title        String // e.g., "Junior React Developer"
  description  String?
  duration     Int // Planned minutes
  isPublic     Boolean               @default(false)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  focusAreas   FocusArea[]
  technologies InterviewTechnology[]
  versions     InterviewVersion[] // Versions of this interview

  @@index([creatorId]) // For creator-specific queries
}

// InterviewVersion: Specific version of an interview by difficulty
model InterviewVersion {
  id          String              @id @default(uuid())
  interviewId String
  interview   Interview           @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  difficulty  Difficulty
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  questions   InterviewQuestion[] // Questions for this version
  sessions    Session[] // Sessions for this version

  @@unique([interviewId, difficulty]) // Ensure one version per difficulty per interview
  @@index([interviewId]) // For interview-specific version queries
}

// InterviewQuestion: Questions within an interview version
model InterviewQuestion {
  id           String           @id @default(uuid())
  versionId    String
  version      InterviewVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)
  text         String
  type         QuestionType
  technologyId String?
  technology   Technology?      @relation(fields: [technologyId], references: [id], onDelete: SetNull)
  createdAt    DateTime         @default(now())

  @@index([versionId]) // For version-specific questions
}

// Technology: Programming languages, frameworks, etc.
model Technology {
  id         String                @id @default(uuid())
  name       String                @unique
  createdAt  DateTime              @default(now())
  interviews InterviewTechnology[]
  questions  InterviewQuestion[]

  @@index([name]) // For technology lookups
}

// InterviewTechnology: Links technologies to interviews
model InterviewTechnology {
  interviewId  String
  technologyId String
  interview    Interview  @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  technology   Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)

  @@id([interviewId, technologyId])
}

// Session: Instance of a user taking an interview version
model Session {
  id           String            @id @default(uuid())
  userId       String
  versionId    String?
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  version      InterviewVersion? @relation(fields: [versionId], references: [id], onDelete: SetNull)
  startedAt    DateTime          @default(now())
  endedAt      DateTime?
  status       SessionStatus     @default(IN_PROGRESS)
  overallScore Float? // 0-100
  transcript   String?           @db.Text
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  feedback     Feedback?

  @@index([userId, versionId]) // For user and version queries
}

// Feedback: Basic AI-generated feedback for a session
model Feedback {
  id               String   @id @default(cuid())
  sessionId        String   @unique
  technical        Int
  communication    Int
  summary          String
  questionAnalysis Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  session          Session  @relation(fields: [sessionId], references: [id])

  @@index([sessionId])
}

// Enums
enum FocusArea {
  TECHNICAL
  SYSTEM_DESIGN
  BEHAVIORAL
  COMMUNICATION
  PROBLEM_SOLVING
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum SessionStatus {
  PAUSED
  IN_PROGRESS
  COMPLETED
}

enum QuestionType {
  TECHNICAL
  BEHAVIORAL
  SYSTEM_DESIGN
  PROBLEM_SOLVING
}
